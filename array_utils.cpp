#include "array_utils.h"
#include <iostream>
#include <fstream>
using namespace std;

//Функція для зчитування елементів масиву з файлу
bool get_mas(char* filename, int in_mas[N], int& in_n) {
    ifstream fin("array_in_8.txt"); // відкриваємо файл для зчитування
    if (!fin.is_open()) { // перевірка на наявність помилки при відкритті файлу
        cout << "Помилка! Не вдалося відкрити файл!" << endl;
        return false;  // повертаємо false, якщо файл не вдалося відкрити
    }
    else {
        fin >> in_n; // розмір масиву зчитується з файлу
        for (int i = 0; i < in_n; i++) {  // елементи масиву зчитуються з файлу
            fin >> in_mas[i];
        }
    }
    fin.close();  // файл закривається після зчитування
    return true;  // повертається true, якщо зчитування пройшло успішно
}

// Функція для виведення елементів масиву до консолі
void show_mas(const int mas[N], const int n) {
    for (int i = 0; i < n; i++) {
        cout << mas[i] << " "; // виводимо елементи масиву
    }
    cout << endl;  // перехід на новий рядок після виведення всіх елементів
}

// Функція для запису елементів масиву в файл
void write_mas(const int mas[N], const int n) {
    ofstream fout("array_out_8.txt"); // відкриваємо файл для запису
    for (int i = 0; i < n; i++) { // елементи масиву записуються у файл
        fout << mas[i] << " ";
    }
    fout.close(); // після запису файл закривається
}

// Функція для обробки завдання: зсув елементів масиву вправо
void shift_array_right(int mas[N], int& n) {
    if (n > 1) { // перевірка, чи масив містить більше одного елементу
        // починаємо з останнього елементу і зсуваємо кожен елемент вправо
        for (int i = n - 1; i > 0; i--) {
            mas[i] = mas[i - 1];
        }
        mas[0] = 0; // перший елемент стає 0
    }
}

//Визначення функцій для завдання 3

// Функція для сортування масиву методом вибору 
void sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) { // пошук мінімального елемента у невідсортованій частині
        int minIndex = i; // індекс мінімального елемента на поточному кроці
        for (int j = i + 1; j < n; j++) { // пошук мінімального елемента в залишковій частині масиву
            if (arr[j] < arr[minIndex]) { // якщо знаходимо менший елемент,
                minIndex = j; // оновлюємо індексу мінімального елемента
            }
        }
        if (minIndex != i) {  // обмін місцями мінімального елемента з елементом на позиції i
            swap(arr[i], arr[minIndex]); // обмін місцями
        }
    }
}

// Функція для зчитування масиву з файлу
bool get_sort(const char* filename, int arr[], int& n) {
    ifstream fin(filename); // відкриття файлу для зчитування
    if (!fin.is_open()) {  // перевірка на успішне відкриття файлу
        cout << "Не вдалося відкрити файл!" << endl; // виведення повідомлення про помилку
        return false;
    }
    fin >> n;  // зчитування кількості елементів масиву

    if (n > S) {  // перевірка, чи кількість елементів не перевищує максимальний розмір S
        // виведення сповіщення про помилку
        cout << "Кількість елементів у файлі перевищує максимальний розмір масиву (" << S << "). Буде обрано лише " << S << " елементів." << endl;
        n = S;  // обмеження кількості елементів
    }

    for (int i = 0; i < n; i++) { // зчитування елементів масиву з файлу
        fin >> arr[i]; // зчитування кожного елементу масиву
    }
    fin.close(); // закриття файлу після зчитування
    return true;
}

// Функція для запису масиву в файл
void write_sort(const char* filename, const int arr[], int n) {
    ofstream fout("sort_out_8.txt"); // відкриття файлу для запису
    if (!fout.is_open()) { // перевірка на успішне відкриття файлу
        cout << "Не вдалося відкрити файл для запису!" << endl; // якщо файл не вдалося відкрити, виводимо помилку
        return; // якщо не вдалося відкрити файл, функція завершується
    }
    for (int i = 0; i < n; i++) { // запис елементів масиву у файл
        fout << arr[i] << " "; // запис кожного елементу масиву через пробіл
    }
    fout.close(); // закриття файлу після запису
}

// Функція для виведення масиву на екран
void show_sort(const int arr[], int n) {
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " "; // виведення кожного елементу масиву
    }
    cout << endl; // після виведення масиву додаємо новий рядок
}
