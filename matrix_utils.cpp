#include "matrix_utils.h"
#include <iostream>
#include <fstream>
using namespace std;

//Функція для зчитування елементів матриці з файлу
bool get_matr(char* filename, int in_matr[M][M], int& in_m, int& in_n) {
    ifstream fin("matr_in_8.txt"); // відкриття файлу для зчитування
    if (!fin.is_open()) { // якщо виникла помилка
        cout << "Помилка! Не вдалося відкрити файл!" << endl; // виводимо сповіщення про це
        return false; // повернення значення як false
    }
    else { // в іншому випадку
        fin >> in_m; // зчитується кільксть рядків
        fin >> in_n; // та стовпців
        for (int i = 0; i < in_m; i++) { // зчитуються елементи матриці
            for (int j = 0; j < in_n; j++) {
                fin >> in_matr[i][j]; // кожен елемент зчитується
            }
        }
    }
    fin.close(); // закриття програми
    return true;
}

//Функція для виведення елементів матриці до консолі
void show_matr(const int matr[M][M], const int m, const int n) {
    for (int i = 0; i < m; i++) { // зчитуються рядки матриці
        for (int j = 0; j < n; j++) { // зчитуються стовпці матриці
            cout << matr[i][j] << "  "; // виведення поточного елементу матриці з пробілом
        }
        cout << endl; // після кожного рядка матриці перехід на новий рядок
    }
}

//Функція для запису результату завдання 2 в файл
void write_result_task_2(char* filename, int res) {
    ofstream fout("matr_out_8.txt"); // виведення файлу з результатами
    fout << "\nПродубльований стовпець: " << res; // виведення результату
    fout.close(); // файл закривається після зчитування
}

// Функція для обробки завдання 2
int processed_task_2(int matr[M][M], int m, int n) {
    // знаходження мінімального елемента у матриці та його стовпець
    int min_val = matr[0][0];  // припущення, що перший елемент - мінімальний
    int min_col = 0; // індекс стовпця, де знаходиться мінімальний елемент

    // проходимо по всіх елементах матриці, щоб знайти мінімальний елемент
    for (int i = 0; i < m; i++) { // проходимо по рядках матриці 
        for (int j = 0; j < n; j++) { // проходимо по стовпцях матриці
            if (matr[i][j] < min_val) { // якщо поточний елемент менший за мінімальний,
                min_val = matr[i][j]; // оновлення мінімального значення
                min_col = j; // оновлення індекса стовпця з мінімальним елементом
            }
        }
    }

    for (int i = 0; i < m; i++) { // дублювання стовпця, що містить мінімальний елемент
        // зсув всіх елементів праворуч від стовпця, що містить мінімум
        for (int j = n; j > min_col; j--) {
            matr[i][j] = matr[i][j - 1];
        }
        matr[i][min_col + 1] = matr[i][min_col]; // дублювання значення мінімального стовпця
    }

    n++; // оновлення кількості стовпців

    return n;  // повернення нової кількості стовпців
}
